(defun get-matrix (n)
  (if (> 0 n) (return-from get-matrix nil))
  (do ((size (+ 1 (* n n)))
     (mtrx (make-array (list n n) :initial-element -1))
     (step_column 1) (step_row 0) (column 0) (row 0)
     (i 1 (1+ i)))
    ((= i size) mtrx)
  (setf (aref mtrx row column) i)
  (let ((new_column (+ column step_column)) (new_row (+ row step_row)))
    (cond
     ((and (< -1 new_column n)
           (< -1 new_row n)
           (= -1 (aref mtrx new_row new_column)))
      (setf column new_column
            row new_row))
     (t (psetf step_column (- step_row)
               step_row step_column)
        (setf column (+ column step_column)
              row (+ row step_row)))))))

(defun spiral-matrix(n)
  (get-matrix n))

(defun print-matrix (matrix &optional (chars 3) stream)
  (if (eq nil matrix) (return-from print-matrix nil))
  (let ((*print-right-margin* (+ 6 (* (1+ chars)
                                      (array-dimension matrix 1)))))
    (pprint matrix stream)
    (values)))
